import { history } from '..'

const CREATE_CHANNEL = 'CREATE_CHANNEL'
const ADD_USERS_ID = 'ADD_USERS_ID'
const ADD_MESSAGE = 'ADD_MESSAGE'
const INIT = 'INIT'

const initialState = {
  channelName: '',
  usersId: [],
  messages: []
}

export default (state = initialState, action) => {
  switch (action.type) {
    case CREATE_CHANNEL: {
      return { ...state, channel: action.channel }
    }
    case ADD_USERS_ID: {
      return { ...state, userId: action.userId }
    }
    case ADD_MESSAGE: {
      return { ...state, message: action.message }
    }
    case INIT: {
      return action
    }
    default:
      return state
  }
}

export function updateChannelNameField(channelName) {
  return { type: CREATE_CHANNEL, channelName }
}

// export function updateUsernameField(username) {
//   return { type: CREATE_USER_NAME, username }
// }

// export function updatePasswordField(password) {
//   return { type: CREATE_PASSWORD, password }
// }

export function initUserChannel(channelName) {
  return (dispatch) => {
    fetch(`/api/v1/channels/${channelName}`)
      .then((res) => res.json())
      .then((data) => {
        dispatch({ type: INIT, channels: data })
      })
  }
}


export function createChannel() {
  return (dispatch, getState) => {
    const { channelName, messages } = getState().channel
    const { user } = getState().auth
    fetch('/api/v1/channels', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        channelName,
        usersId: user.id,
        messages
      })
    })
      .then((res) => {
        console.log(res.ok, res)
        if (!res.ok) throw res
        return res.json()
      })
      .then(() => {
        // dispatch({ type: INIT, data })
        // history.push(`/private/${channelName}`)
        history.push('/private')
      })
      .catch((error) => {
        console.log(error)
        alert('Error')
      })
  }
}
